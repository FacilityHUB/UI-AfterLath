local AimBotModule = {}
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local Cam = workspace.CurrentCamera

local Configuration = {
    -- Checks
    TeamCheck = false,
    WallCheck = false,
    AliveCheck = false,
    FovCheck = false,

    -- FOV Settings
    Fov = false,
    Visible = false,
    Thickness = 0.6,
    Color = Color3.fromRGB(255, 255, 255),
    LockColor = Color3.fromRGB(255, 0, 0),
    OffColor = Color3.fromRGB(150, 150, 150),
    Filled = false,
    Size = 100,

    -- Aimbot Settings
    SelectedPart = { "Head" },
    maxDistance = 2000,
    sensitivity = 0.1,
    AimBotEnabled = false,
    aimbotActive = false,
    AimToggleMode = false,
    AimKey = Enum.UserInputType.MouseButton2,
    Priority = "Cursor",
    aimpredictions = false,
    predictionTime = 0.1
}

local FOV = Drawing.new("Circle")
FOV.Visible = Configuration.Visible
FOV.Thickness = Configuration.Thickness
FOV.Color = Configuration.Color
FOV.Filled = Configuration.Filled
FOV.Radius = Configuration.Size
FOV.Position = Vector2.new(Cam.ViewportSize.X / 2, Cam.ViewportSize.Y / 2)

local currentTargetPart = Configuration.SelectedPart[1]

local function findTargetPart(player, targetPartName)
    if not player.Character or not targetPartName then
        return nil
    end

    for _, descendant in ipairs(player.Character:GetDescendants()) do
        if descendant:IsA("BasePart") and descendant.Name == targetPartName then
            return descendant
        end
    end
    return nil
end

local function predictPosition(targetPart)
    if not targetPart or not targetPart:IsA("BasePart") then
        return nil
    end
    if Configuration.aimpredictions then
        return targetPart.Position + targetPart.Velocity * Configuration.predictionTime
    end
    return targetPart.Position
end

local function alignCameraToTarget(targetPosition)
    Cam.CFrame = CFrame.new(Cam.CFrame.Position, targetPosition)
end

local function isInFOV(targetPosition)
    local screenPosition, isVisible = Cam:WorldToViewportPoint(targetPosition)
    local distanceFromCenter = (Vector2.new(screenPosition.X, screenPosition.Y) - Vector2.new(Cam.ViewportSize.X / 2, Cam.ViewportSize.Y / 2)).Magnitude

    return isVisible and distanceFromCenter <= FOV.Radius
end

local function getClosestPlayer(trg_part)
    local nearest = nil
    local lastDistance = Configuration.maxDistance
    local localFaction = Players.LocalPlayer:FindFirstChild("PersonalFactionData")
        and Players.LocalPlayer.PersonalFactionData:FindFirstChild("PersonalFaction")

    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= Players.LocalPlayer then
            local part = findTargetPart(player, trg_part)
            local humanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
            local targetFaction = player:FindFirstChild("PersonalFactionData")
                and player.PersonalFactionData:FindFirstChild("PersonalFaction")

            if part and humanoid and humanoid.Health > 0 then
                local distanceFromPlayer = (Cam.CFrame.Position - part.Position).Magnitude

                if Configuration.TeamCheck and localFaction and targetFaction and localFaction.Value == targetFaction.Value then
                    continue
                end
                
                if distanceFromPlayer > Configuration.maxDistance then
                    continue
                end
                
                if Configuration.WallCheck then
                    local ray = workspace:FindPartOnRayWithIgnoreList(
                        Ray.new(Cam.CFrame.Position, (part.Position - Cam.CFrame.Position).Unit * distanceFromPlayer),
                        { Players.LocalPlayer.Character, Cam }
                    )
                    if not ray or not ray:IsDescendantOf(player.Character) then
                        continue
                    end
                end
                
                if not Configuration.FovCheck or isInFOV(part.Position) then
                    if distanceFromPlayer < lastDistance then
                        nearest = player
                        lastDistance = distanceFromPlayer
                    end
                end
            end
        end
    end
    return nearest
end

local function getLowestHealthPlayer(trg_part)
    local target = nil
    local lowestHealth = math.huge
    local localFaction = Players.LocalPlayer:FindFirstChild("PersonalFactionData")
        and Players.LocalPlayer.PersonalFactionData:FindFirstChild("PersonalFaction")

    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= Players.LocalPlayer then
            local part = findTargetPart(player, trg_part)
            local humanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
            local targetFaction = player:FindFirstChild("PersonalFactionData")
                and player.PersonalFactionData:FindFirstChild("PersonalFaction")

            if part and humanoid and humanoid.Health > 0 then
                local distanceFromPlayer = (Cam.CFrame.Position - part.Position).Magnitude
                
                if Configuration.TeamCheck and localFaction and targetFaction and localFaction.Value == targetFaction.Value then
                    continue
                end

                if distanceFromPlayer > Configuration.maxDistance then
                    continue
                end

                if Configuration.WallCheck then
                    local ray = workspace:FindPartOnRayWithIgnoreList(
                        Ray.new(Cam.CFrame.Position, (part.Position - Cam.CFrame.Position).Unit * distanceFromPlayer),
                        { Players.LocalPlayer.Character, Cam }
                    )
                    if not ray or not ray:IsDescendantOf(player.Character) then
                        continue
                    end
                end
                
                if not Configuration.FovCheck or isInFOV(part.Position) then
                    if humanoid.Health < lowestHealth then
                        target = player
                        lowestHealth = humanoid.Health
                    end
                end
            end
        end
    end
    return target
end

local function getPlayerClosestToCursor(trg_part)
    local nearest = nil
    local smallestDistance = math.huge
    local mousePosition = Vector2.new(Mouse.X, Mouse.Y)
    local localFaction = Players.LocalPlayer:FindFirstChild("PersonalFactionData")
        and Players.LocalPlayer.PersonalFactionData:FindFirstChild("PersonalFaction")

    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= Players.LocalPlayer then
            local part = findTargetPart(player, trg_part)
            local humanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
            local targetFaction = player:FindFirstChild("PersonalFactionData")
                and player.PersonalFactionData:FindFirstChild("PersonalFaction")

            if part and humanoid and humanoid.Health > 0 then
                local screenPosition, isVisible = Cam:WorldToViewportPoint(part.Position)
                local distanceToCursor = (Vector2.new(screenPosition.X, screenPosition.Y) - mousePosition).Magnitude
                
                if Configuration.TeamCheck and localFaction and targetFaction and localFaction.Value == targetFaction.Value then
                    continue
                end

                local distanceFromPlayer = (Cam.CFrame.Position - part.Position).Magnitude
                if distanceFromPlayer > Configuration.maxDistance then
                    continue
                end

                if Configuration.WallCheck then
                    local ray = workspace:FindPartOnRayWithIgnoreList(
                        Ray.new(Cam.CFrame.Position, (part.Position - Cam.CFrame.Position).Unit * distanceFromPlayer),
                        { Players.LocalPlayer.Character, Cam }
                    )
                    if not ray or not ray:IsDescendantOf(player.Character) then
                        continue
                    end
                end
                
                if not Configuration.FovCheck or isInFOV(part.Position) then
                    if distanceToCursor < smallestDistance then
                        nearest = player
                        smallestDistance = distanceToCursor
                    end
                end
            end
        end
    end
    return nearest
end

local function getTargetPlayer()
    if Configuration.Priority == "LowestHealth" then
        return getLowestHealthPlayer(currentTargetPart)
    elseif Configuration.Priority == "Closest" then
        return getClosestPlayer(currentTargetPart)
    elseif Configuration.Priority == "Cursor" then
        return getPlayerClosestToCursor(currentTargetPart)
    end
end

UserInputService.InputBegan:Connect(function(input)
    if input.UserInputType == Configuration.AimKey and Configuration.AimBotEnabled then
        if Configuration.AimToggleMode then
            Configuration.aimbotActive = not Configuration.aimbotActive
        else
            Configuration.aimbotActive = true
        end
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Configuration.AimKey and not Configuration.AimToggleMode and Configuration.AimBotEnabled then
        Configuration.aimbotActive = false
    end
end)

RunService.RenderStepped:Connect(function()
    FOV.Position = Vector2.new(Cam.ViewportSize.X / 2, Cam.ViewportSize.Y / 2)

    if Configuration.aimbotActive then
        local closest = getTargetPlayer()
        if closest and closest.Character:FindFirstChild(currentTargetPart, true) then
            local targetPartInstance = closest.Character:FindFirstChild(currentTargetPart, true)
            local predictedPosition = predictPosition(targetPartInstance)

            FOV.Color = Configuration.LockColor
            alignCameraToTarget(predictedPosition)
        else
            FOV.Color = Configuration.Color
        end
    else
        FOV.Color = Configuration.Color
    end
end)

return AimBotModule
